
/*
 * generated by Xtext 2.9.0
 */
package com.zenika.aic.generator

import com.zenika.aicdsl.Battery
import com.zenika.aicdsl.Gps
import com.zenika.aicdsl.Scenario
import com.zenika.aicdsl.Sensor
import com.zenika.aicdsl.MultipleSensor
import com.zenika.aicdsl.Typing
import com.zenika.aicdsl.Replace
import com.zenika.aicdsl.Click
import com.zenika.aicdsl.Scroll
import com.zenika.aicdsl.Picture
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class DslGenerator implements IGenerator {
	String header 
	String body
	String footer
	int testCounter
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		testCounter = 1
		header = ""
		body = ""
		footer = ""
		header = "	
package com.zenika.aic.demo.sensor;
	
import android.hardware.Sensor;
import android.support.test.InstrumentationRegistry;
import android.support.test.runner.AndroidJUnit4;
import android.test.InstrumentationTestCase;
import android.util.Log;

import com.zenika.aic.core.libs.sensor.Device;
import com.zenika.aic.core.libs.sensor.SensorsPacket;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.Before;

@RunWith(AndroidJUnit4.class)
public class Testing extends InstrumentationTestCase {

	private Device device;
	private String appName = \"Sensor\";


    @Before
    public void init() {
        device = new Device(appName, InstrumentationRegistry.getInstrumentation());
	}
"
		footer = "
}
"
		for(r: resource.allContents.toIterable) {
			if(r instanceof Scenario) {
				body += "
	@Test
    public void test"+testCounter+"() {"				
				r.eAllContents.toIterable
				for(action: r.eAllContents.toIterable) {
					if(action instanceof Sensor) {
						body += "
		device.setValuesForSensor(new float[]{"+action.value + "f},Sensor."+action.sensorName +");"
					}else if(action instanceof Battery) {
						body += "
		device.getBatteryInstance().setLevel("+action.value + ", 100);"
					}else if(action instanceof Gps) {
						body += "
		device.getGPSInstance().setPosition("+action.lat + ", "+action.lon+", "+action.alti+");"
					}else if(action instanceof Typing) {
						body += "
		device.setText("+action.text + ", "+action.id+");"
					}else if(action instanceof Replace) {
						body += "
		device.replaceText("+action.text + ", "+action.id+");"
					}else if(action instanceof Click) {
						body += "
		device.clickOn("+action.buttonId +");"
					}else if(action instanceof Scroll) {
						body += "
		device.scrollOnFrom("+action.to + ", "+action.from+");"
					}else if(action instanceof Picture) {
						body += "
		device.device.bringPictureToCamera("+action.from + ");"
					}else if(action instanceof MultipleSensor) {
						body += "
		device.setValuesForSensor(new float[]{"+action.value + "f, "+action.value2 + "f, "+action.value3 + "f},Sensor."+action.sensorName +");"
					}
				}
				body += "
	}
"				testCounter++
			}
		}
		
		fsa.generateFile('Testing.java', header + body + footer)
	}
}
